#!/usr/bin/env python

"""Utilities used inside cisp to generate definitions automatically."""

import re


def define_token(token):
    """Return the mandatory definition for a token to be used within cisp
       where cisp expects a valid token.

       For example, in order to use an identifier as a method name in a
       cisp type, the definition generated by this function must be written
       for that specific identifier.
    """
    if not isinstance(token, str):
        raise TypeError("{} is not of type {}".format(token, str))
    return "#define CISP_TOKEN_{} ({})".format(token, " ".join(token))


def parse_macro(macro):
    """Parse a macro in the form of a string and return a tuple containing
       the macro's name and a list of its parameters.

       The macro must contain the following:
       * The name of the macro.
       * An optional list of parameters to the macro.

       Examples of valid strings are:
       'make_pair(R, T)', 'deref(T)', 'my_type()', 'my_other_type'
    """
    if not isinstance(macro, str):
        raise TypeError("{} is not of type {}".format(macro, str))
    match = re.match(r"(?P<name>\w+)(?P<params>\([\w\s,]*\))?", macro)
    name = match.group("name")
    params = match.group("params")
    params = params.strip("()").split(",") if params else [ ]
    return name, params


def generate_tokens(output_function, *macros):
    """Generate the CISP_TOKEN_ macro associated to each macro name.
    """
    parsed_macros = (parse_macro(macro) for macro in macros)
    token_definitions = (define_token(name) for name, params in parsed_macros)
    for line in filter(None, token_definitions):
        output_function(line)


if __name__ == "__main__":
    pass
